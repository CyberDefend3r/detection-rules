[metadata]
creation_date = "2021/10/15"
maturity = "production"
updated_date = "2021/11/11"

[rule]
author = ["Elastic"]
description = """
This rule detects the presence of Portable Executables in a PowerShell Script by Looking for its encoded header.
Attackers embed PEs into PowerShell Scripts for Injecting them into the memory, avoiding defenses by not writing to
disk.,
"""
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.*"]
language = "kuery"
license = "Elastic License v2"
name = "Suspicious Portable Executable Encoded in Powershell Script"
note = """## Triage and analysis.

### Investigating Suspicious Portable Executable Encoded in Powershell Script

PowerShell is one of the main tools in the belt of system administrators for automation, report routines, and other tasks.

Attackers can abuse PowerShell In-Memory capabilities to inject executables into memory without touching the disk, bypassing
AntiVirus software. These executables are generally base64 encoded.

#### Possible investigation steps:

- Check for additional PowerShell logs that indicate that the script/command was run.
- Gather the script content that may be split into multiple script blocks, and identify its capabilities.
- If the action is suspicious for the user, check for any other activities done by the user in the last 48 hours.
- Look for additional alerts involving the host and the user.

### False Positive Analysis

- Verify whether the script content is malicious/harmful.

### Related Rules

- PowerShell Reflection Assembly Load - e26f042e-c590-4e82-8e05-41e81bd822ad
- PowerShell Suspicious Payload Encoded and Compressed - 81fe9dc6-a2d7-4192-a2d8-eed98afc766a
- PowerShell PSReflect Script - 56f2e9b5-4803-4e44-a0a4-a52dc79d57fe

### Response and Remediation

- Immediate response should be taken to validate, investigate, and potentially contain the activity to prevent further
post-compromise behavior.

## Config

The 'PowerShell Script Block Logging' logging policy is required be configured (Enable).
Steps to implement the logging policy with with Advanced Audit Configuration:

```
Computer Configuration > 
Administrative Templates > 
Windows PowerShell > 
Turn on PowerShell Script Block Logging (Enable)
```

Steps to implement the logging policy via registry:

```
reg add "hklm\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging" /v EnableScriptBlockLogging /t REG_DWORD /d 1
```
"""
references = [
    "https://github.com/atc-project/atc-data/blob/master/docs/Logging_Policies/LP_0109_windows_powershell_script_block_log.md"
]
risk_score = 47
rule_id = "ad84d445-b1ce-4377-82d9-7c633f28bf9a"
severity = "medium"
tags = ["Elastic", "Host", "Windows", "Threat Detection", "Execution"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.code:"4104" and 
  powershell.file.script_block_text : (
    TVqQAAMAAAAEAAAA
  )
'''


[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

    [[rule.threat.technique.subtechnique]]
    id = "T1059.001"
    name = "PowerShell"
    reference = "https://attack.mitre.org/techniques/T1059/001/"

[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"

