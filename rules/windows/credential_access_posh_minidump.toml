[metadata]
creation_date = "2021/10/05"
maturity = "production"
updated_date = "2021/11/11"

[rule]
author = ["Elastic"]
description = """
This rule detects PowerShell scripts that have capabilities to dump process memory using WindowsErrorReporting or
Dbghelp.dll MiniDumpWriteDump. Attackers can use this tooling to dump LSASS and get access to credentials.
"""
false_positives = ["Powershell Scripts that use this capability for troubleshooting."]
from = "now-9m"
index = ["winlogbeat-*", "logs-windows.*"]
language = "kuery"
license = "Elastic License v2"
name = "PowerShell MiniDump Script"
note = """## Triage and analysis.

### Investigating PowerShell MiniDump Script

PowerShell is one of the main tools in the belt of system administrators for automation, report routines, and other tasks.

Process Memory Dump capabilities can be abused by attackers to extract credentials from LSASS or to obtain other privileged
information stored in the process memory.

#### Possible investigation steps:

- Check for additional PowerShell logs that indicate that the script/command was run.
- Gather the script content and check if it has the process that is targeted hardcoded.
- Inspect the script for additional capabilities, like parsing of the memory dump, exfiltration, etc.
- If the action is suspicious for the user, check for any other activities done by the user in the last 48 hours.
- Look for additional alerts involving the host and the user.

### False Positive Analysis

- Verify whether the script content is malicious/harmful.

### Related Rules

- PowerShell PSReflect Script
- Potential Process Injection via PowerShell

### Response and Remediation

- Immediate response should be taken to validate activity, investigate and potentially isolate activity to prevent further
post-compromise behavior.

## Config

The 'PowerShell Script Block Logging' logging policy is required be configured (Enable).
Steps to implement the logging policy with with Advanced Audit Configuration:

```
Computer Configuration > 
Administrative Templates > 
Windows PowerShell > 
Turn on PowerShell Script Block Logging (Enable)
```

Steps to implement the logging policy via registry:

```
reg add "hklm\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging" /v EnableScriptBlockLogging /t REG_DWORD /d 1
```
"""
references = [
    "https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Out-Minidump.ps1",
    "https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Get-ProcessMiniDump.ps1",
    "https://github.com/atc-project/atc-data/blob/master/docs/Logging_Policies/LP_0109_windows_powershell_script_block_log.md"
]
risk_score = 73
rule_id = "577ec21e-56fe-4065-91d8-45eb8224fe77"
severity = "high"
tags = ["Elastic", "Host", "Windows", "Threat Detection", "Credential Access"]
timestamp_override = "event.ingested"
type = "query"

query = '''
event.code:"4104" and powershell.file.script_block_text:(MiniDumpWriteDump or MiniDumpWithFullMemory or pmuDetirWpmuDiniM)
'''


[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
reference = "https://attack.mitre.org/techniques/T1003/"
id = "T1003"
name = "OS Credential Dumping"

    [[rule.threat.technique.subtechnique]]
    reference = "https://attack.mitre.org/techniques/T1003/001/"
    id = "T1003.001"
    name = "LSASS Memory"


[rule.threat.tactic]
reference = "https://attack.mitre.org/tactics/TA0006/"
id = "TA0006"
name = "Credential Access"

[[rule.threat]]
framework = "MITRE ATT&CK"

[[rule.threat.technique]]
id = "T1059"
name = "Command and Scripting Interpreter"
reference = "https://attack.mitre.org/techniques/T1059/"

    [[rule.threat.technique.subtechnique]]
    id = "T1059.001"
    name = "PowerShell"
    reference = "https://attack.mitre.org/techniques/T1059/001/"


[rule.threat.tactic]
id = "TA0002"
name = "Execution"
reference = "https://attack.mitre.org/tactics/TA0002/"
